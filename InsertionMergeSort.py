__author__ = 'Tong'

import time

sample_short = [2, 4, 5, 7, 1, 2, 3, 6, 1]
sample_large = [955, 111, 348, 972, 735, 779, 908, 419, 574, 778, 940, 601, 684, 592, 49, 128, 669, 475, 716, 202, 987,
                871, 927, 34, 910, 827, 255, 415, 422, 513, 306, 882, 166, 273, 657, 528, 941, 97, 172, 663, 822, 150,
                916, 389, 539, 377, 562, 285, 666, 621, 699, 72, 373, 903, 487, 715, 687, 647, 765, 231, 199, 812, 877,
                788, 49, 373, 993, 24, 310, 244, 598, 888, 887, 492, 126, 776, 50, 754, 294, 894, 546, 744, 679, 106,
                561, 456, 291, 291, 666, 528, 874, 490, 642, 844, 883, 302, 204, 831, 254, 632, 947, 630, 903, 713, 269,
                115, 895, 309, 953, 258, 506, 441, 969, 434, 507, 44, 996, 616, 343, 305, 880, 528, 526, 34, 198, 496,
                128, 358, 10, 50, 641, 981, 520, 731, 522, 695, 720, 345, 99, 825, 982, 632, 936, 825, 163, 761, 808,
                826, 999, 626, 393, 866, 894, 922, 494, 701, 878, 878, 32, 972, 895, 364, 124, 447, 553, 311, 698, 312,
                921, 811, 424, 609, 31, 43, 251, 140, 760, 562, 192, 235, 811, 305, 650, 346, 201, 333, 512, 619, 873,
                911, 801, 285, 131, 279, 971, 340, 129, 453, 206, 404, 585, 274, 760, 867, 295, 13, 267, 973, 385, 600,
                110, 685, 267, 918, 22, 897, 456, 131, 889, 508, 148, 528, 683, 756, 181, 123, 596, 574, 514, 380, 760,
                209, 881, 781, 842, 533, 802, 357, 785, 266, 15, 806, 878, 311, 780, 78, 445, 964, 672, 166, 374, 391,
                604, 765, 7, 120, 535, 316, 566, 971, 408, 7, 487, 746, 638, 198, 409, 565, 947, 547, 496, 733, 815,
                146, 80, 796, 249, 572, 118, 750, 747, 254, 327, 737, 759, 304, 327, 4, 180, 80, 905, 417, 968, 29, 970,
                828, 154, 574, 20, 510, 252, 467, 715, 848, 64, 8, 676, 159, 961, 777, 375, 391, 767, 207, 277, 190,
                327, 728, 205, 577, 292, 75, 409, 629, 677, 710, 474, 350, 2, 2, 574, 716, 835, 158, 668, 440, 500, 486,
                803, 828, 688, 561, 76, 834, 171, 517, 984, 668, 715, 37, 686, 100, 395, 359, 698, 875, 567, 871, 807,
                379, 159, 327, 986, 76, 244, 607, 847, 232, 741, 628, 478, 141, 501, 554, 509, 704, 667, 591, 1, 580,
                193, 396, 340, 434, 786, 556, 311, 598, 719, 12, 570, 560, 385, 815, 317, 956, 370, 359, 154, 806, 706,
                970, 224, 46, 140, 209, 695, 587, 12, 719, 152, 724, 777, 381, 394, 248, 890, 503, 259, 192, 28, 842,
                151, 741, 849, 763, 809, 929, 213, 291, 540, 804, 383, 799, 538, 926, 830, 557, 812, 397, 492, 350, 284,
                322, 746, 678, 907, 357, 170, 968, 525, 962, 354, 492, 606, 912, 279, 595, 564, 324, 629, 599, 327, 498,
                975, 832, 579, 113, 868, 607, 516, 151, 278, 502, 917, 349, 509, 517, 510, 118, 750, 452, 418, 558, 596,
                765, 732, 890, 845, 897, 591, 93, 845, 495, 699, 74, 490, 427, 819, 863, 409, 538, 266, 850, 259, 550,
                350, 181, 796, 632, 425, 812, 787, 553, 251, 550, 400, 132, 744, 798, 158, 663, 154, 117, 716, 729, 550,
                475, 214, 366, 887, 655, 767, 181, 168, 651, 55, 496, 504, 957, 534, 63, 952, 561, 7, 441, 847, 292,
                666, 595, 911, 708, 374, 279, 273, 257, 727, 197, 248, 344, 735, 354, 534, 226, 912, 658, 593, 245, 978,
                179, 675, 992, 83, 337, 958, 261, 651, 962, 919, 329, 965, 674, 358, 656, 585, 146, 964, 509, 802, 951,
                923, 638, 804, 560, 219, 102, 752, 934, 962, 55, 559, 482, 633, 247, 856, 190, 181, 466, 328, 510, 127,
                792, 496, 668, 341, 830, 70, 591, 804, 670, 414, 767, 884, 865, 557, 241, 546, 238, 970, 544, 677, 477,
                767, 945, 178, 213, 671, 588, 392, 998, 519, 483, 868, 321, 425, 561, 705, 753, 483, 253, 656, 974, 286,
                310, 245, 358, 902, 886, 866, 177, 379, 54, 772, 515, 596, 813, 346, 414, 676, 501, 848, 520, 30, 773,
                235, 903, 775, 457, 352, 223, 360, 328, 203, 278, 97, 928, 699, 590, 274, 537, 626, 547, 238, 924, 247,
                497, 737, 816, 321, 974, 494, 531, 877, 395, 93, 674, 572, 720, 30, 579, 763, 148, 215, 924, 286, 873,
                540, 577, 466, 992, 621, 699, 930, 588, 948, 731, 718, 367, 301, 61, 495, 2, 719, 160, 170, 148, 751,
                615, 536, 466, 903, 871, 132, 205, 713, 843, 348, 336, 364, 661, 631, 984, 663, 982, 942, 759, 876, 749,
                832, 637, 936, 236, 758, 478, 675, 655, 208, 323, 377, 1, 372, 245, 48, 631, 521, 180, 755, 925, 171,
                747, 296, 395, 654, 815, 5, 92, 734, 353, 874, 85, 286, 234, 865, 334, 506, 982, 345, 128, 838, 640,
                163, 656, 746, 184, 824, 302, 967, 9, 170, 382, 830, 923, 986, 552, 491, 870, 215, 785, 562, 876, 509,
                869, 911, 20, 303, 165, 56, 115, 553, 613, 161, 16, 691, 237, 122, 520, 325, 522, 841, 456, 28, 377,
                116, 643, 237, 787, 48, 705, 260, 924, 416, 268, 808, 916, 774, 314, 475, 437, 612, 142, 451, 350, 400,
                577, 603, 945, 130, 644, 895, 894, 119, 651, 408, 789, 286, 723, 255, 215, 936, 905, 96, 752, 293, 971,
                667, 443, 550, 784, 95, 118, 580, 649, 411, 334, 181, 717, 43, 670, 526, 261, 500, 232, 213, 300, 423,
                707, 513, 310, 623, 763, 121, 483, 34, 890, 999, 141, 431, 597, 992, 398, 4, 862, 815, 899, 691, 153,
                454, 449, 534, 29, 755, 615, 921, 866, 209, 26, 252, 536, 631, 188, 329, 155, 713, 373, 547, 640, 291,
                317, 819, 723, 726, 121, 927, 265, 824, 556, 679, 421, 288, 477, 660, 197, 535, 900, 496, 299, 253, 449,
                597, 972, 500, 287, 141, 825, 154, 117, 439, 1, 94, 607, 399, 365, 490, 881, 631, 169, 911, 706, 263,
                575, 37, 630, 567, 577, 871, 25, 879, 870, 593, 654, 626, 669, 561, 664, 747, 336, 223, 399, 826, 64,
                559, 44, 429, 621, 40, 400, 361, 673, 857, 910, 595, 712, 346, 829]


def sort(a, func, arg):
    if arg is None:
        print(func(a))
    else:
        print(func(a, arg))


# INSERTION-SORT
def insertion_sort(a):
    for j in range(len(a)):
        i = j - 1
        key = a[j]
        while a[i] > key and i >= 0:
            a[i + 1] = a[i]
            i -= 1
        a[i + 1] = key
    return a


# MERGE-SORT
def recursive_merge_sort(a):
    if len(a) == 1:
        return a
    mid = int(len(a) / 2)
    left = a[:mid]
    right = a[mid:]
    return merge(recursive_merge_sort(left), recursive_merge_sort(right))


def merge(left, right):
    result = []
    while len(left) > 0 and len(right) > 0:
        if left[0] < right[0]:
            result.append(left[0])
            left.remove(left[0])
        else:
            result.append(right[0])
            right.remove(right[0])
    return result + left + right


# INSERTION-MERGE-SORT
def insertion_merge_sort(a, k):
    if len(a) == 1:
        return a
    mid = int(len(a) / 2)
    left = a[:mid]
    right = a[mid:]
    if len(a) < k:
        return insertion_sort(a)
    else:
        return merge(insertion_merge_sort(left, k), insertion_merge_sort(right, k))


# sort(sample_short, recursive_merge_sort)
# sort(sample_short, insertion_sort)
# sort(sample_large, insertion_merge_sort, 512)

# EXPERIMENT TO FIND THE BEST K

# optimized_merge_sort(sample_large, k)
# def time_for_k(k):
# start_time = time.clock()
# # recursive_merge_sort(sample_large)
# insertion_sort(sample_large)
#     end_time = time.clock()
#     return int((end_time - start_time) * 10000)


# best_k = 0
# for k in range(1024):
#     interval = int((time_for_k(k) + time_for_k(k) + time_for_k(k) + time_for_k(k) + time_for_k(k)) / 5)
#     print(k, ' ', interval)

# for k in range(1, 1024):
#     start_time = time.clock()
#     recursive_merge_sort(sample_large[:k])
#     time1 = (time.clock() - start_time)
#     start_time = time.clock()
#     insertion_sort(sample_large[:k])
#     time2 = (time.clock() - start_time)
#     print("k = " + k.__str__() + ", merge - insertion = " + (time1 - time2).__str__())
#     # print(k.__str__() + " " + time2.__str__() + " " + time1.__str__())
